#define EAGLEFLY_SIZE InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 0 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 100 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 200 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 300 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 400 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 500 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 600 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 700 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 800 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 900 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 1000 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 1100 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 1200 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 1300 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;} printf_s(" 1400 ");InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}InitExtraction(&BitsArray);PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));PushBits(&BitsArray, BitsID(16, 0xFFFF));if(EvalBits(&State, &BitsArray)){char SegmentBuffer[MAX_BUFFER_SIZE] = {0};char Ov[MAX_BUFFER_SIZE] = {0};char EAXString[MAX_BUFFER_SIZE] = {0};u32 wbitPresent = true;u32 EffOperandSize = GetEffOperandSize(ProcessorMode, DefaultOperandSize, rex, OperandSizeOverridePrefixPresent, wbitPresent, BitsArray.Base[1]);u32 EffAdressSize = GetEffAdressSize(DefaultAdressSize, AdressSizeOverridePrefixPresent);GetEAXReg(EAXString, MAX_BUFFER_SIZE, EffOperandSize);bits moffset = Zeroes(EffAdressSize);if(moffset.N == 64){u64 High32 = GetBits_msb(&State, 32);u64 Low32 = GetBits_msb(&State, 32);moffset.Value = (High32 << 32) | Low32;}else{moffset.Value = GetBits_msb(&State, moffset.N);}PrintImmediateToBuffer(Ov, MAX_BUFFER_SIZE, EffAdressSize, moffset);if(Group2Prefix > group2_Invalid){GetSegmentOverridePrefixTable(Group2Prefix, SegmentBuffer, MAX_BUFFER_SIZE);}else{_snprintf_s(SegmentBuffer, MAX_BUFFER_SIZE, MAX_BUFFER_SIZE, "DS");}printf_s("MOV %s : [ %s ] %s", SegmentBuffer, Ov, EAXString);goto INSTRUCTION_FOUND;}