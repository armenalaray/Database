//////////////////////////////////////////////////////
//
//Author: Alejandro Armenta 
//Date: 2019
//File: instruction_stream.cpp
//Company: 
//
//All rights reserved.
//
//////////////////////////////////////////////////////


        uint8_t InstructionStream64[8192] = 
        {
            
            //ADD Instructions
            //0x67, 0b10000000, 0b10000100, 0b10000100, 0x44, 0x44, 0x44, 0x44, 0x22,
            
            0b00000011, 0b01101010, 0x77,
            0b00000010, 0b01101010, 0x88,
            
            0b00000001, 0b01101100, 0b11111101, 0xF8,
            0b00000000, 0b01101100, 0b11111101, 0xF8,
            
            //INC Instructions
            0b01000110, 0b11111111, 0b00000001,
            0b01000110, 0b11111110, 0b00000001,
            
            //BTC Instructions
            0b00001111, 0b10111011, 0b01111100, 0b01000100, 0xEE,
            0x40, 0b00001111, 0b10111010, 0b10111101, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD,
            
            //BTS Instructions
            0b00001111, 0b10101011, 0b01111100, 0b01000100, 0xEE,
            
            
            0x40, 0b00001111, 0b10111010, 0b10101101, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD,
            
            //BT Instructions
            0b00001111, 0b10100011, 0b01111100, 0b01000100, 0xEE,
            0x40, 0b00001111, 0b10111010, 0b10100101, 0xFF, 0xFF, 0xFF, 0xFF, 0xDD,
            
            
            //BTR Instructions
            0b00001111, 0b10110011, 0b11001000, 
            0xF0, 0x49, 0b00001111, 0b10111010,  0b10110101, 0xFF, 0xFF, 0xFF, 0xFF, 0b10011010,
            
            //SCAS Instructions
            
            0xF3, 0xF2, 0x48, 0b10101111,
            0xF3, 0b10101110,
            
            //COMPS Instructions
            0xF2, 0x48, 0b10100111,
            0xF3, 0x48, 0b10100110,
            
            //STOS Instructions
            0b10101011, 
            0b10101010, 
            
            //OUTS Instructions
            0x48, 0b01101111, 
            0x48, 0b01101110, 
            //MOVS Instructions
            0x48, 0b10100101,
            0b10100100,
            
            //LODS Instructions
            0x66, 0xF3, 0x48, 0b10101101,
            0x66, 0xF3, 0x48, 0b10101100,
            
            //INS Instructions
            0x66, 0xF3, 0x48, 0b01101101,
            0x66, 0xF3, 0b01101100,
            
            //IMUL instructions
            
            0b01101001, 0b10011001, 0x55, 0x44, 0x33, 0x22, 0x77, 0x66, 0x55, 0x44,  
            0x66, 0x48, 0b01101011, 0b01110100, 0b00011110 , 0x77, 0x33, 
            0x67, 0x43, 0b00001111, 0b10101111, 0b01000100, 0b01100101, 0xCC, 
            0x66, 0x41, 0b11110111, 0b01101101, 0xEE,
            0x66, 0x41, 0b11110110, 0b10101101, 0xEE, 0xEE, 0xEE, 0xEE,
            
            //MOV instructions
            
            0x48, 0b10100011, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            0x48, 0b10100010, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            
            0x48, 0b10100001, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            0x48, 0b10100000, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            
            0x48, 0b10111001, 0x55, 0xBB, 0x55, 0xBB, 0x55, 0xBB, 0x55, 0xBB, 
            0x48, 0b10110001, 0x55,
            
            0x66, 0x49, 0b11000111, 0b10000110, 0x11, 0x11, 0x11, 0x11, 0xBB, 0xCC, 0xDD, 0xEE,
            0x66, 0x49, 0b11000111, 0b11000110, 0x11, 0x11, 0x11, 0x11, //0xBB, 0xCC, 0xDD, 0xEE,
            0x66, 0x49, 0b11000110, 0b11000110, 0x11,
            0x66, 0x44, 0x8B, 0b10100100 , 0b11000000, 0xFF, 0xFF, 0xFF, 0xFF,
            0x4D, 0x88, 0xEC,
            
            //DEC instructions
            
            0b01001111,
            0b11111110, 0b11001100,
            
            //JMP instructions
            //NOTE(Alex): JMP far direct Instructions
            //0b11101010, 0x00 ,0x00 ,0x00 ,0x00, 0xFF, 0xFF, //Invalid on 64 bit mode 
            
            //NOTE(Alex): JMP far inderect Instructions
            //0x66, 0x67, 0x4F, 0b11111111, 0b11101100, 0b00001000, 0x07, //NOTE(Alex), invalid memory instruction accessing the register page file
            0x66, 0x67, 0x4F, 0b11111111, 0b01101100, 0b00001000, 0x07,
            
            //NOTE(Alex): JMP near indirect Instructions
            0xFF, 0b00100000, 
            
            //NOTE(Alex): JMP near direct Instructions
            0xE9, 0xAA, 0xBB, 0xCC, 0xDD,
            //NOTE(Alex): JMP short Instructions
            0xEB, 0x00,
            //NOTE(Alex): JCXZ Instructions
            0xE3, 0x10,
            //NOTE(Alex): Jcc Instructions
            0x0F, 0x84, 0x04, 0x00, 0x00, 0x00,
            0x67, 0x70, 0x80,
			
            // MOV â€“ Move Data - "MOV <Evqp>, <Gvqp>";
            0x4D, 0x89, 0xEC,
            
            //MOV - Move Data - MOV <Ovqp> , <rAX>
            0x48, 0b10100011, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            //MOV - Move Data - MOV <Ob> , <AL>
            0x48, 0b10100010, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            //MOV - Move Data - MOV <rAX> , <Ovqp>
            0x48, 0b10100001, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            //NOTE(Alex): MOV Instruction MOV <AL>,<Ob>
            0x48, 0b10100000, 0x44, 0x44, 0x44, 0x44, 0x77, 0x77, 0x77, 0x77,
            
            //NOTE(Alex): JCXZ Instructions
            0xE3, 0x10,
            0xE3, 0x10,
            //NOTE(Alex): Jcc Instructions
            0x67, 0x70, 0x80,
            
            //////////////////////
            
            //NOTE(Alex): Other jump instructions
            
            0x67, 0xFF, 0x2C, 0x24, 
            
            0x41, 0xFF, 0x65, 0x00,
            
            0xFF, 0xE0,
            
            0xE9, 0x15, 0x01, 0x00, 0x00, 
            0xEB, 0xF8,
            
            
            ///////////////////////////////////
            
            0x41, 0x54,
            0x50,
            
            0x40, 0x8A, 0x20, 
            0x49, 0x8B, 0x5C, 0x45, 0x00,
            0x48, 0x8B, 0x5C, 0x45, 0x00,
            0x48, 0x8B, 0x5C, 0x05, 0xFF, 
            0x48, 0x8B, 0x1C, 0x85, 0x00, 0x11, 0x22, 0x33,
            0x4A, 0x8B, 0xAC, 0xE4, 0x00, 0x11, 0x22, 0x33,
            0x4D, 0x8B, 0x04, 0x24, 
            0x4D, 0x8B, 0x45, 0x00, 
            0x4C, 0x8B, 0x80, 0x00, 0x11, 0x22, 0x33,  
            0x44, 0x8B, 0x80, 0x00, 0x11, 0x22, 0x33,  
            0x48, 0x89, 0xD0, 
            
            0x80, 0x40, 0xF0, 0x0B,
            
            0xD8, 0xC1,
            0xDD, 0xE1,
            0xDD, 0x05, 0x04, 0x00, 0x00, 0x00,
            
            0x0F, 0x01, 0xC3,
            0x66, 0x0F, 0x3A, 0x0F, 0xC1, 0x08,
            0x0F, 0xA4, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03,
            0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
            
            //0x62, 0x04, 0x4B,
            //0xD5, 0x0A,
        };
        
        uint8_t InstructionStream32[1024] = 
        {
            0x62, 0x04, 0x4B,
            0xD5, 0x0A,
            0x89, 0xD0,
            //0x48, 0x89, 0xD0, 
            0x80, 0x40, 0xF0, 0x0B,
            0xD8, 0xC1,
            0xDD, 0xE1,
            0xDD, 0x05, 0x04, 0x00, 0x00, 0x00,
            0x0F, 0x01, 0xC3,
            0x66, 0x0F, 0x3A, 0x0F, 0xC1, 0x08,
            0x0F, 0xA4, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03,
            0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
        };
        
        
